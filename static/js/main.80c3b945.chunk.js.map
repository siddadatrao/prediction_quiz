{"version":3,"sources":["components/quizinfo.js","components/Quiz.js","serviceWorker.js","index.js"],"names":["quizinfo","id","question","options","option_display","option_result","Quiz","props","state","answer","currrentQuestion","outcomes_array","outcomes","final_outcome","handleNextButton","bind","optionClicked","this","setState","console","log","indexOf","Math","max","length","findOutcome","event","value","i","parseInt","key","replace","style","right","overflow","ListGroup","map","option","ListGroupItem","width","action","onClick","JSON","stringify","replacer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80c3b945.chunk.js","sourcesContent":["// outcomes: [\"friends\", \"shameless\", \"game of thrones\", \"nba\"]\nexport const quizinfo = [\n    {\n        id: 0, \n        question: 'What is your favorite season?',\n        options: [\n            {\n                option_display: 'Winter',\n                option_result: [2, 3]\n            }, \n            {\n                option_display: 'Summer',\n                option_result: [0, 1]\n            }, \n            {\n                option_display: 'Spring',\n                option_result: [1]\n            },\n            {     \n                option_display: 'Fall',\n                option_result: [1, 2]\n            }\n        ],\n    },\n    {\n        id: 1, \n        question: 'What kind of person would your friends say you are?',\n        options: [\n            {\n                option_display: 'Savage',\n                option_result: [2, 3]\n            }, \n            {\n                option_display: 'Happy',\n                option_result: [0, 1]\n            }, \n            {\n                option_display: 'Jovial',\n                option_result: [0]\n            },\n            {     \n                option_display: 'Competitive',\n                option_result: [0, 3]\n            }\n        ],\n    },\n    {\n        id: 2, \n        question: 'How many people make up your close cirlce',\n        options: [\n            {\n                option_display: '0 - 5',\n                option_result: [2]\n            }, \n            {\n                option_display: '5 - 10',\n                option_result: [0, 1, 3]\n            }, \n            {\n                option_display: '10-15',\n                option_result: [0]\n            },\n            {     \n                option_display: '15+',\n                option_result: [3]\n            }\n        ],\n    },\n    {\n        id: 3, \n        question: 'What is your favorite drink?',\n        options: [\n            {\n                option_display: 'Water',\n                option_result: [2]\n            }, \n            {\n                option_display: 'Coffee',\n                option_result: [1]\n            }, \n            {\n                option_display: 'Beer',\n                option_result: [1,2,3]\n            },\n            {     \n                option_display: 'Sprite',\n                option_result: [0, 1]\n            }\n        ],\n    }\n]\n\n","import React from 'react'\nimport { quizinfo } from './quizinfo';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\n\n//thing 1, thing 2, thing 3, thing 4\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      answer: null,\n      currrentQuestion: 0,\n      options: [],\n      question: '',\n      outcomes_array: [0, 0, 0, 0],\n      outcomes: [\"friends\", \"shameless\", \"game of thrones\", \"nba\"],\n      final_outcome: \"\"\n    }\n\n\n    this.handleNextButton = this.handleNextButton.bind(this);\n    this.optionClicked = this.optionClicked.bind(this);\n  }\n\n\n  componentDidMount() {\n\n    this.setState(() => {\n      return {\n        currrentQuestion: 0,\n        question: quizinfo[this.state.currrentQuestion].question,\n        options: quizinfo[this.state.currrentQuestion].options\n      }\n    })\n  }\n\n  findOutcome() {\n    console.log(\"Final Choice:\" + this.state.outcomes_array.indexOf(Math.max(...this.state.outcomes_array)))\n    this.setState({\n      final_outcome: this.state.outcomes[this.state.outcomes_array.indexOf(Math.max(...this.state.outcomes_array))]\n    })\n  }\n\n  handleNextButton() {\n    if (this.state.currrentQuestion < quizinfo.length - 1) {\n      this.setState({\n        currrentQuestion: this.state.currrentQuestion + 1,\n        question: quizinfo[this.state.currrentQuestion + 1].question,\n        options: quizinfo[this.state.currrentQuestion + 1].options\n      });\n      //console.log(this.state.currrentQuestion)\n    } else {\n      this.findOutcome()\n    }\n  }\n\n  optionClicked(event) {\n    //console.log(event)\n\n    var value = this.state.outcomes_array\n\n\n\n    for (var i = 0; i < event.length; i ++) {\n      value[parseInt(event[i])] += 1\n    }\n\n\n    // value[event] = value[event] + 1\n\n    this.setState({\n      outcomes_array: value\n    })\n\n    console.log(this.state.outcomes_array)\n\n    this.handleNextButton()\n  }\n\n\n  replacer(key, value) {\n    const unquoted = value.replace(/\"([^\"]+)\":/g, '$1:');\n    return unquoted\n  }\n\n\n  \n  render() {\n    return (\n      <div style={{ right: 100}}>\n        <h2>{this.state.question}</h2>\n\n\n        <div style={{ overflow: 'auto'}}>\n          <ListGroup>\n            {this.state.options.map((option, id) => (\n              <ListGroupItem style= {{width: 200 }} key={id} action onClick={(id) => this.optionClicked(option.option_result)}>\n                <h2>{JSON.stringify(option.option_display, this.replacer)}</h2>\n              </ListGroupItem>\n            ))}\n          </ListGroup>\n        </div>\n\n\n\n        <button style= {{width: 200}}onClick={this.handleNextButton}>\n          <h3>Next</h3>\n        </button>\n\n        <h1>{this.state.final_outcome}</h1>\n      </div>\n\n\n    )\n  }\n}\n\nexport default Quiz","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Quiz from './components/Quiz'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quiz />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}